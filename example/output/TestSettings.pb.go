// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: TestSettings.proto

package output

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// key:[""]
type TestSettings struct {
	Key                   int32    `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`
	ID                    int32    `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	GiftsDesc             string   `protobuf:"bytes,3,opt,name=GiftsDesc,proto3" json:"GiftsDesc,omitempty"`
	BackstageName         string   `protobuf:"bytes,4,opt,name=BackstageName,proto3" json:"BackstageName,omitempty"`
	LevelSection          []int32  `protobuf:"varint,5,rep,packed,name=LevelSection,proto3" json:"LevelSection,omitempty"`
	VIPSection            []int32  `protobuf:"varint,6,rep,packed,name=VIPSection,proto3" json:"VIPSection,omitempty"`
	RefreshType           int32    `protobuf:"varint,7,opt,name=RefreshType,proto3" json:"RefreshType,omitempty"`
	NextKey               int32    `protobuf:"varint,8,opt,name=NextKey,proto3" json:"NextKey,omitempty"`
	StayCycle             int32    `protobuf:"varint,9,opt,name=StayCycle,proto3" json:"StayCycle,omitempty"`
	BaseKey               int32    `protobuf:"varint,10,opt,name=BaseKey,proto3" json:"BaseKey,omitempty"`
	ActivationType        int32    `protobuf:"varint,11,opt,name=ActivationType,proto3" json:"ActivationType,omitempty"`
	ActivationParameter   int32    `protobuf:"varint,12,opt,name=ActivationParameter,proto3" json:"ActivationParameter,omitempty"`
	ConflictType          int32    `protobuf:"varint,13,opt,name=ConflictType,proto3" json:"ConflictType,omitempty"`
	Priority              int32    `protobuf:"varint,14,opt,name=Priority,proto3" json:"Priority,omitempty"`
	GoogleID              string   `protobuf:"bytes,15,opt,name=GoogleID,proto3" json:"GoogleID,omitempty"`
	AppleID               string   `protobuf:"bytes,16,opt,name=AppleID,proto3" json:"AppleID,omitempty"`
	FacebookID            string   `protobuf:"bytes,17,opt,name=FacebookID,proto3" json:"FacebookID,omitempty"`
	USDollar              float32  `protobuf:"fixed32,18,opt,name=USDollar,proto3" json:"USDollar,omitempty"`
	RMB                   int32    `protobuf:"varint,19,opt,name=RMB,proto3" json:"RMB,omitempty"`
	VipExp                int32    `protobuf:"varint,20,opt,name=VipExp,proto3" json:"VipExp,omitempty"`
	GetDiamond            int32    `protobuf:"varint,21,opt,name=GetDiamond,proto3" json:"GetDiamond,omitempty"`
	GetItemCollection     int32    `protobuf:"varint,22,opt,name=GetItemCollection,proto3" json:"GetItemCollection,omitempty"`
	PresentDiamond        int32    `protobuf:"varint,23,opt,name=PresentDiamond,proto3" json:"PresentDiamond,omitempty"`
	PresentItemCollection int32    `protobuf:"varint,24,opt,name=PresentItemCollection,proto3" json:"PresentItemCollection,omitempty"`
	EventGems             int32    `protobuf:"varint,25,opt,name=EventGems,proto3" json:"EventGems,omitempty"`
	Days                  int32    `protobuf:"varint,26,opt,name=Days,proto3" json:"Days,omitempty"`
	ItemCollectionID      int32    `protobuf:"varint,27,opt,name=ItemCollectionID,proto3" json:"ItemCollectionID,omitempty"`
	Quota                 int32    `protobuf:"varint,28,opt,name=Quota,proto3" json:"Quota,omitempty"`
	RefreshTime           int32    `protobuf:"varint,29,opt,name=RefreshTime,proto3" json:"RefreshTime,omitempty"`
	DisplayName           string   `protobuf:"bytes,30,opt,name=DisplayName,proto3" json:"DisplayName,omitempty"`
	Description           string   `protobuf:"bytes,31,opt,name=Description,proto3" json:"Description,omitempty"`
	Order                 int32    `protobuf:"varint,32,opt,name=Order,proto3" json:"Order,omitempty"`
	Rank                  int32    `protobuf:"varint,33,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Label                 int32    `protobuf:"varint,34,opt,name=Label,proto3" json:"Label,omitempty"`
	Icon                  string   `protobuf:"bytes,35,opt,name=Icon,proto3" json:"Icon,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *TestSettings) Reset()         { *m = TestSettings{} }
func (m *TestSettings) String() string { return proto.CompactTextString(m) }
func (*TestSettings) ProtoMessage()    {}
func (*TestSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aea803188603834, []int{0}
}
func (m *TestSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSettings.Merge(m, src)
}
func (m *TestSettings) XXX_Size() int {
	return m.Size()
}
func (m *TestSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TestSettings proto.InternalMessageInfo

func (m *TestSettings) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *TestSettings) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *TestSettings) GetGiftsDesc() string {
	if m != nil {
		return m.GiftsDesc
	}
	return ""
}

func (m *TestSettings) GetBackstageName() string {
	if m != nil {
		return m.BackstageName
	}
	return ""
}

func (m *TestSettings) GetLevelSection() []int32 {
	if m != nil {
		return m.LevelSection
	}
	return nil
}

func (m *TestSettings) GetVIPSection() []int32 {
	if m != nil {
		return m.VIPSection
	}
	return nil
}

func (m *TestSettings) GetRefreshType() int32 {
	if m != nil {
		return m.RefreshType
	}
	return 0
}

func (m *TestSettings) GetNextKey() int32 {
	if m != nil {
		return m.NextKey
	}
	return 0
}

func (m *TestSettings) GetStayCycle() int32 {
	if m != nil {
		return m.StayCycle
	}
	return 0
}

func (m *TestSettings) GetBaseKey() int32 {
	if m != nil {
		return m.BaseKey
	}
	return 0
}

func (m *TestSettings) GetActivationType() int32 {
	if m != nil {
		return m.ActivationType
	}
	return 0
}

func (m *TestSettings) GetActivationParameter() int32 {
	if m != nil {
		return m.ActivationParameter
	}
	return 0
}

func (m *TestSettings) GetConflictType() int32 {
	if m != nil {
		return m.ConflictType
	}
	return 0
}

func (m *TestSettings) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *TestSettings) GetGoogleID() string {
	if m != nil {
		return m.GoogleID
	}
	return ""
}

func (m *TestSettings) GetAppleID() string {
	if m != nil {
		return m.AppleID
	}
	return ""
}

func (m *TestSettings) GetFacebookID() string {
	if m != nil {
		return m.FacebookID
	}
	return ""
}

func (m *TestSettings) GetUSDollar() float32 {
	if m != nil {
		return m.USDollar
	}
	return 0
}

func (m *TestSettings) GetRMB() int32 {
	if m != nil {
		return m.RMB
	}
	return 0
}

func (m *TestSettings) GetVipExp() int32 {
	if m != nil {
		return m.VipExp
	}
	return 0
}

func (m *TestSettings) GetGetDiamond() int32 {
	if m != nil {
		return m.GetDiamond
	}
	return 0
}

func (m *TestSettings) GetGetItemCollection() int32 {
	if m != nil {
		return m.GetItemCollection
	}
	return 0
}

func (m *TestSettings) GetPresentDiamond() int32 {
	if m != nil {
		return m.PresentDiamond
	}
	return 0
}

func (m *TestSettings) GetPresentItemCollection() int32 {
	if m != nil {
		return m.PresentItemCollection
	}
	return 0
}

func (m *TestSettings) GetEventGems() int32 {
	if m != nil {
		return m.EventGems
	}
	return 0
}

func (m *TestSettings) GetDays() int32 {
	if m != nil {
		return m.Days
	}
	return 0
}

func (m *TestSettings) GetItemCollectionID() int32 {
	if m != nil {
		return m.ItemCollectionID
	}
	return 0
}

func (m *TestSettings) GetQuota() int32 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *TestSettings) GetRefreshTime() int32 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

func (m *TestSettings) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *TestSettings) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TestSettings) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *TestSettings) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *TestSettings) GetLabel() int32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *TestSettings) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type TestSettingsConfigData struct {
	Config               []*TestSettings `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TestSettingsConfigData) Reset()         { *m = TestSettingsConfigData{} }
func (m *TestSettingsConfigData) String() string { return proto.CompactTextString(m) }
func (*TestSettingsConfigData) ProtoMessage()    {}
func (*TestSettingsConfigData) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aea803188603834, []int{1}
}
func (m *TestSettingsConfigData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSettingsConfigData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSettingsConfigData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSettingsConfigData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSettingsConfigData.Merge(m, src)
}
func (m *TestSettingsConfigData) XXX_Size() int {
	return m.Size()
}
func (m *TestSettingsConfigData) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSettingsConfigData.DiscardUnknown(m)
}

var xxx_messageInfo_TestSettingsConfigData proto.InternalMessageInfo

func (m *TestSettingsConfigData) GetConfig() []*TestSettings {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*TestSettings)(nil), "output.TestSettings")
	proto.RegisterType((*TestSettingsConfigData)(nil), "output.TestSettingsConfigData")
}

func init() { proto.RegisterFile("TestSettings.proto", fileDescriptor_6aea803188603834) }

var fileDescriptor_6aea803188603834 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xdf, 0x52, 0xd3, 0x40,
	0x14, 0xc6, 0x4d, 0x4b, 0x0b, 0x2c, 0x7f, 0x2c, 0xcb, 0x1f, 0x8f, 0x88, 0x35, 0x56, 0xc7, 0xe9,
	0x38, 0x0c, 0xe3, 0xa8, 0x2f, 0x40, 0x09, 0x74, 0x32, 0x02, 0xd6, 0x14, 0xb9, 0x5f, 0xc2, 0xa1,
	0xee, 0x90, 0x64, 0x33, 0xd9, 0x85, 0x21, 0x6f, 0xe2, 0xc3, 0xf8, 0x00, 0x5e, 0xfa, 0x08, 0x0e,
	0xbe, 0x88, 0xb3, 0x27, 0xa5, 0x4d, 0x80, 0xbb, 0xfd, 0x7e, 0xdf, 0x97, 0xb3, 0x3d, 0xbb, 0xa7,
	0xcb, 0xf8, 0x09, 0x6a, 0x33, 0x44, 0x63, 0x64, 0x32, 0xd2, 0x3b, 0x69, 0xa6, 0x8c, 0xe2, 0x4d,
	0x75, 0x65, 0xd2, 0x2b, 0xd3, 0xf9, 0x35, 0xc7, 0x16, 0xcb, 0x36, 0x6f, 0xb1, 0xfa, 0x17, 0xcc,
	0xc1, 0x71, 0x9d, 0x6e, 0x23, 0xb0, 0x4b, 0xbe, 0xcc, 0x6a, 0xbe, 0x07, 0x35, 0x02, 0x35, 0xdf,
	0xe3, 0x5b, 0x6c, 0xbe, 0x2f, 0x2f, 0x8c, 0xf6, 0x50, 0x87, 0x50, 0x77, 0x9d, 0xee, 0x7c, 0x30,
	0x05, 0xfc, 0x2d, 0x5b, 0xea, 0x89, 0xf0, 0x52, 0x1b, 0x31, 0xc2, 0x63, 0x11, 0x23, 0xcc, 0x50,
	0xa2, 0x0a, 0x79, 0x87, 0x2d, 0x1e, 0xe2, 0x35, 0x46, 0x43, 0x0c, 0x8d, 0x54, 0x09, 0x34, 0xdc,
	0x7a, 0xb7, 0x11, 0x54, 0x18, 0x6f, 0x33, 0x76, 0xea, 0x0f, 0xee, 0x12, 0x4d, 0x4a, 0x94, 0x08,
	0x77, 0xd9, 0x42, 0x80, 0x17, 0x19, 0xea, 0x1f, 0x27, 0x79, 0x8a, 0x30, 0x4b, 0x3f, 0xb0, 0x8c,
	0x38, 0xb0, 0xd9, 0x63, 0xbc, 0x31, 0xb6, 0x9f, 0x39, 0x72, 0xef, 0xa4, 0xed, 0x61, 0x68, 0x44,
	0xbe, 0x97, 0x87, 0x11, 0xc2, 0x3c, 0x79, 0x53, 0x60, 0xbf, 0xeb, 0x09, 0x8d, 0xf6, 0x3b, 0x56,
	0x7c, 0x37, 0x96, 0xfc, 0x1d, 0x5b, 0xde, 0x0d, 0x8d, 0xbc, 0x16, 0xf6, 0x17, 0xd0, 0xb6, 0x0b,
	0x14, 0xb8, 0x47, 0xf9, 0x07, 0xb6, 0x3a, 0x25, 0x03, 0x91, 0x89, 0x18, 0x0d, 0x66, 0xb0, 0x48,
	0xe1, 0xc7, 0x2c, 0x7b, 0x22, 0x7b, 0x2a, 0xb9, 0x88, 0x64, 0x68, 0xa8, 0xee, 0x12, 0x45, 0x2b,
	0x8c, 0x6f, 0xb2, 0xb9, 0x41, 0x26, 0x55, 0x26, 0x4d, 0x0e, 0xcb, 0xe4, 0x4f, 0xb4, 0xf5, 0xfa,
	0x4a, 0x8d, 0x22, 0xf4, 0x3d, 0x78, 0x4a, 0x47, 0x3e, 0xd1, 0xb6, 0x9f, 0xdd, 0x34, 0x25, 0xab,
	0x45, 0xd6, 0x9d, 0xb4, 0x67, 0x7c, 0x20, 0x42, 0x3c, 0x53, 0xea, 0xd2, 0xf7, 0x60, 0x85, 0xcc,
	0x12, 0xb1, 0x55, 0xbf, 0x0f, 0x3d, 0x15, 0x45, 0x22, 0x03, 0xee, 0x3a, 0xdd, 0x5a, 0x30, 0xd1,
	0x76, 0x52, 0x82, 0xa3, 0x1e, 0xac, 0x16, 0x93, 0x12, 0x1c, 0xf5, 0xf8, 0x06, 0x6b, 0x9e, 0xca,
	0x74, 0xff, 0x26, 0x85, 0x35, 0x82, 0x63, 0x65, 0x77, 0xe9, 0xa3, 0xf1, 0xa4, 0x88, 0x55, 0x72,
	0x0e, 0xeb, 0xe4, 0x95, 0x08, 0xdf, 0x66, 0x2b, 0x7d, 0x34, 0xbe, 0xc1, 0x78, 0x4f, 0x45, 0xd1,
	0xf8, 0xc2, 0x37, 0x28, 0xf6, 0xd0, 0xb0, 0x77, 0x30, 0xc8, 0x50, 0x63, 0x32, 0xa9, 0xf8, 0xac,
	0xb8, 0x83, 0x2a, 0xe5, 0x9f, 0xd9, 0xfa, 0x98, 0xdc, 0xab, 0x0c, 0x14, 0x7f, 0xdc, 0xb4, 0x93,
	0xb1, 0x7f, 0x8d, 0x89, 0xe9, 0x63, 0xac, 0xe1, 0x79, 0x31, 0x19, 0x13, 0xc0, 0x39, 0x9b, 0xf1,
	0x44, 0xae, 0x61, 0x93, 0x0c, 0x5a, 0xf3, 0xf7, 0xac, 0x55, 0xad, 0xe1, 0x7b, 0xf0, 0x82, 0xfc,
	0x07, 0x9c, 0xaf, 0xb1, 0xc6, 0xb7, 0x2b, 0x65, 0x04, 0x6c, 0x51, 0xa0, 0x10, 0xe5, 0x49, 0x96,
	0x31, 0xc2, 0xcb, 0xea, 0x24, 0xcb, 0x18, 0x6d, 0xc2, 0x93, 0x3a, 0x8d, 0x44, 0x4e, 0xff, 0xa9,
	0x36, 0x5d, 0x54, 0x19, 0x51, 0x02, 0x75, 0x98, 0xc9, 0x94, 0x7a, 0x7c, 0x35, 0x4e, 0x4c, 0x91,
	0xdd, 0xfb, 0x6b, 0x76, 0x8e, 0x19, 0xb8, 0xc5, 0xde, 0x24, 0x6c, 0x47, 0x81, 0x48, 0x2e, 0xe1,
	0x75, 0xd1, 0x91, 0x5d, 0xdb, 0xe4, 0xa1, 0x38, 0xc3, 0x08, 0x3a, 0x45, 0x92, 0x84, 0x4d, 0xfa,
	0xa1, 0x4a, 0xe0, 0x0d, 0x95, 0xa6, 0x75, 0xe7, 0x80, 0x6d, 0x94, 0x5f, 0x0f, 0x3b, 0xad, 0x72,
	0xe4, 0x09, 0x23, 0xf8, 0x36, 0x6b, 0x86, 0xa4, 0xc0, 0x71, 0xeb, 0xdd, 0x85, 0x8f, 0x6b, 0x3b,
	0xc5, 0x8b, 0xb3, 0x53, 0xce, 0x07, 0xe3, 0x4c, 0xaf, 0xf5, 0xfb, 0xb6, 0xed, 0xfc, 0xb9, 0x6d,
	0x3b, 0x7f, 0x6f, 0xdb, 0xce, 0xcf, 0x7f, 0xed, 0x27, 0x67, 0x4d, 0x7a, 0xa7, 0x3e, 0xfd, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0x65, 0x7b, 0xc4, 0xce, 0xbd, 0x04, 0x00, 0x00,
}

func (m *TestSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintTestSettings(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if m.Label != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.Label))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.Rank != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.Order != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTestSettings(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTestSettings(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	if m.RefreshTime != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.RefreshTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.Quota != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.Quota))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.ItemCollectionID != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.ItemCollectionID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.Days != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.EventGems != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.EventGems))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.PresentItemCollection != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.PresentItemCollection))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.PresentDiamond != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.PresentDiamond))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.GetItemCollection != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.GetItemCollection))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.GetDiamond != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.GetDiamond))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.VipExp != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.VipExp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.RMB != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.RMB))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.USDollar != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.USDollar))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x95
	}
	if len(m.FacebookID) > 0 {
		i -= len(m.FacebookID)
		copy(dAtA[i:], m.FacebookID)
		i = encodeVarintTestSettings(dAtA, i, uint64(len(m.FacebookID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.AppleID) > 0 {
		i -= len(m.AppleID)
		copy(dAtA[i:], m.AppleID)
		i = encodeVarintTestSettings(dAtA, i, uint64(len(m.AppleID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.GoogleID) > 0 {
		i -= len(m.GoogleID)
		copy(dAtA[i:], m.GoogleID)
		i = encodeVarintTestSettings(dAtA, i, uint64(len(m.GoogleID)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Priority != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x70
	}
	if m.ConflictType != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.ConflictType))
		i--
		dAtA[i] = 0x68
	}
	if m.ActivationParameter != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.ActivationParameter))
		i--
		dAtA[i] = 0x60
	}
	if m.ActivationType != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.ActivationType))
		i--
		dAtA[i] = 0x58
	}
	if m.BaseKey != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.BaseKey))
		i--
		dAtA[i] = 0x50
	}
	if m.StayCycle != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.StayCycle))
		i--
		dAtA[i] = 0x48
	}
	if m.NextKey != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.NextKey))
		i--
		dAtA[i] = 0x40
	}
	if m.RefreshType != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.RefreshType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.VIPSection) > 0 {
		dAtA2 := make([]byte, len(m.VIPSection)*10)
		var j1 int
		for _, num1 := range m.VIPSection {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTestSettings(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LevelSection) > 0 {
		dAtA4 := make([]byte, len(m.LevelSection)*10)
		var j3 int
		for _, num1 := range m.LevelSection {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTestSettings(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BackstageName) > 0 {
		i -= len(m.BackstageName)
		copy(dAtA[i:], m.BackstageName)
		i = encodeVarintTestSettings(dAtA, i, uint64(len(m.BackstageName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GiftsDesc) > 0 {
		i -= len(m.GiftsDesc)
		copy(dAtA[i:], m.GiftsDesc)
		i = encodeVarintTestSettings(dAtA, i, uint64(len(m.GiftsDesc)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if m.Key != 0 {
		i = encodeVarintTestSettings(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TestSettingsConfigData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSettingsConfigData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSettingsConfigData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Config) > 0 {
		for iNdEx := len(m.Config) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Config[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTestSettings(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTestSettings(dAtA []byte, offset int, v uint64) int {
	offset -= sovTestSettings(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovTestSettings(uint64(m.Key))
	}
	if m.ID != 0 {
		n += 1 + sovTestSettings(uint64(m.ID))
	}
	l = len(m.GiftsDesc)
	if l > 0 {
		n += 1 + l + sovTestSettings(uint64(l))
	}
	l = len(m.BackstageName)
	if l > 0 {
		n += 1 + l + sovTestSettings(uint64(l))
	}
	if len(m.LevelSection) > 0 {
		l = 0
		for _, e := range m.LevelSection {
			l += sovTestSettings(uint64(e))
		}
		n += 1 + sovTestSettings(uint64(l)) + l
	}
	if len(m.VIPSection) > 0 {
		l = 0
		for _, e := range m.VIPSection {
			l += sovTestSettings(uint64(e))
		}
		n += 1 + sovTestSettings(uint64(l)) + l
	}
	if m.RefreshType != 0 {
		n += 1 + sovTestSettings(uint64(m.RefreshType))
	}
	if m.NextKey != 0 {
		n += 1 + sovTestSettings(uint64(m.NextKey))
	}
	if m.StayCycle != 0 {
		n += 1 + sovTestSettings(uint64(m.StayCycle))
	}
	if m.BaseKey != 0 {
		n += 1 + sovTestSettings(uint64(m.BaseKey))
	}
	if m.ActivationType != 0 {
		n += 1 + sovTestSettings(uint64(m.ActivationType))
	}
	if m.ActivationParameter != 0 {
		n += 1 + sovTestSettings(uint64(m.ActivationParameter))
	}
	if m.ConflictType != 0 {
		n += 1 + sovTestSettings(uint64(m.ConflictType))
	}
	if m.Priority != 0 {
		n += 1 + sovTestSettings(uint64(m.Priority))
	}
	l = len(m.GoogleID)
	if l > 0 {
		n += 1 + l + sovTestSettings(uint64(l))
	}
	l = len(m.AppleID)
	if l > 0 {
		n += 2 + l + sovTestSettings(uint64(l))
	}
	l = len(m.FacebookID)
	if l > 0 {
		n += 2 + l + sovTestSettings(uint64(l))
	}
	if m.USDollar != 0 {
		n += 6
	}
	if m.RMB != 0 {
		n += 2 + sovTestSettings(uint64(m.RMB))
	}
	if m.VipExp != 0 {
		n += 2 + sovTestSettings(uint64(m.VipExp))
	}
	if m.GetDiamond != 0 {
		n += 2 + sovTestSettings(uint64(m.GetDiamond))
	}
	if m.GetItemCollection != 0 {
		n += 2 + sovTestSettings(uint64(m.GetItemCollection))
	}
	if m.PresentDiamond != 0 {
		n += 2 + sovTestSettings(uint64(m.PresentDiamond))
	}
	if m.PresentItemCollection != 0 {
		n += 2 + sovTestSettings(uint64(m.PresentItemCollection))
	}
	if m.EventGems != 0 {
		n += 2 + sovTestSettings(uint64(m.EventGems))
	}
	if m.Days != 0 {
		n += 2 + sovTestSettings(uint64(m.Days))
	}
	if m.ItemCollectionID != 0 {
		n += 2 + sovTestSettings(uint64(m.ItemCollectionID))
	}
	if m.Quota != 0 {
		n += 2 + sovTestSettings(uint64(m.Quota))
	}
	if m.RefreshTime != 0 {
		n += 2 + sovTestSettings(uint64(m.RefreshTime))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 2 + l + sovTestSettings(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovTestSettings(uint64(l))
	}
	if m.Order != 0 {
		n += 2 + sovTestSettings(uint64(m.Order))
	}
	if m.Rank != 0 {
		n += 2 + sovTestSettings(uint64(m.Rank))
	}
	if m.Label != 0 {
		n += 2 + sovTestSettings(uint64(m.Label))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 2 + l + sovTestSettings(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestSettingsConfigData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Config) > 0 {
		for _, e := range m.Config {
			l = e.Size()
			n += 1 + l + sovTestSettings(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTestSettings(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTestSettings(x uint64) (n int) {
	return sovTestSettings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftsDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftsDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackstageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackstageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTestSettings
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LevelSection = append(m.LevelSection, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTestSettings
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTestSettings
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTestSettings
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LevelSection) == 0 {
					m.LevelSection = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTestSettings
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LevelSection = append(m.LevelSection, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelSection", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTestSettings
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VIPSection = append(m.VIPSection, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTestSettings
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTestSettings
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTestSettings
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VIPSection) == 0 {
					m.VIPSection = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTestSettings
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VIPSection = append(m.VIPSection, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VIPSection", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshType", wireType)
			}
			m.RefreshType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextKey", wireType)
			}
			m.NextKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextKey |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StayCycle", wireType)
			}
			m.StayCycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StayCycle |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseKey", wireType)
			}
			m.BaseKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseKey |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationType", wireType)
			}
			m.ActivationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationParameter", wireType)
			}
			m.ActivationParameter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationParameter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConflictType", wireType)
			}
			m.ConflictType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConflictType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoogleID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppleID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FacebookID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FacebookID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field USDollar", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.USDollar = float32(math.Float32frombits(v))
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RMB", wireType)
			}
			m.RMB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RMB |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipExp", wireType)
			}
			m.VipExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipExp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDiamond", wireType)
			}
			m.GetDiamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GetDiamond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetItemCollection", wireType)
			}
			m.GetItemCollection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GetItemCollection |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresentDiamond", wireType)
			}
			m.PresentDiamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PresentDiamond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresentItemCollection", wireType)
			}
			m.PresentItemCollection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PresentItemCollection |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventGems", wireType)
			}
			m.EventGems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventGems |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCollectionID", wireType)
			}
			m.ItemCollectionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemCollectionID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			m.Quota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quota |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			m.RefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			m.Label = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Label |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTestSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTestSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSettingsConfigData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSettingsConfigData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSettingsConfigData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestSettings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config, &TestSettings{})
			if err := m.Config[len(m.Config)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestSettings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestSettings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTestSettings
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTestSettings
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTestSettings
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTestSettings        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestSettings          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTestSettings = fmt.Errorf("proto: unexpected end of group")
)
